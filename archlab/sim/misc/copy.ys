# Execution begins at address 0
    .pos 0
    irmovq stack,%rsp       # Set up stack pointer
    call main               # Execute main program
    halt                    # Terminate program

    .align 8
# Source block
src:
    .quad 0x00a
    .quad 0x0b0
    .quad 0xc00
# Destination block
dest:
    .quad 0x111
    .quad 0x222
    .quad 0x333


main:
    irmovq src,%rdi
    irmovq dest,%rsi
    irmovq $3,%rdx
    call copy_block         # copy_block(src, dest, 3)
    ret

# long copy_block(long *src, long *dest, long len)
copy_block:
    xorq %rax,%rax          # %rax = 0
    irmovq $1,%r9           # %r9 = 1
    irmovq $8,%r10          # %r10 = 8
    andq %rdx,%rdx          # set CC
    jmp test
loop:
    mrmovq (%rdi),%r11      # %r11 = val
    rmmovq %r11,(%rsi)      # write val
    xorq %r11,%rax          # result ^= val
    addq %r10,%rdi
    addq %r10,%rsi
    subq %r9,%rdx
    andq %rdx,%rdx          # set CC
test:
    jne loop                # stop when len == 0
    ret

# Stack starts here and grows to lower addresses
    .pos 0x200
stack:

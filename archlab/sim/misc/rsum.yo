                            | # Execution begins at address 0
0x000:                      |     .pos 0
0x000: 30f40002000000000000 |     irmovq stack,%rsp       # Set up stack pointer
0x00a: 804800000000000000   |     call main               # Execute main program
0x013: 00                   |     halt                    # Terminate program
                            | 
                            | # Sample linked list
0x018:                      |     .align 8
0x018:                      | ele1:
0x018: 0a00000000000000     |     .quad 0x00a
0x020: 2800000000000000     |     .quad ele2
0x028:                      | ele2:
0x028: b000000000000000     |     .quad 0x0b0
0x030: 3800000000000000     |     .quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     |     .quad 0xc00
0x040: 0000000000000000     |     .quad 0
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 |     irmovq ele1,%rdi        # Push head of linked-list
0x052: 805c00000000000000   |     call rsum_list          # rsum_list(ls)
0x05b: 90                   |     ret
                            | 
                            | # long rsum_list(list_ptr ls)
0x05c:                      |     rsum_list:
0x05c: 30f80800000000000000 |     irmovq $0x8,%r8
0x066: a03f                 |     pushq %rbx              # Save %rbx
0x068: 2076                 |     rrmovq %rdi,%rsi        # %rsi = ls
0x06a: 6300                 |     xorq %rax,%rax          # sum = 0
0x06c: 6266                 |     andq %rsi,%rsi          # Set CC
0x06e: 709b00000000000000   |     jmp test                # Goto test
0x077:                      | recur:
0x077: 50360000000000000000 |     mrmovq (%rsi),%rbx      # %rbx = val
0x081: 50760800000000000000 |     mrmovq 8(%rsi),%rdi     # %rdi = ls->next
0x08b: 805c00000000000000   |     call rsum_list          # rsum_list(ls->next)
0x094: 6030                 |     addq %rbx,%rax          # %rax = val + rest
0x096: b03f                 |     popq %rbx               # Restore %rbx
0x098: 6084                 |     addq %r8,%rsp
0x09a: 90                   |     ret
0x09b:                      | test:
0x09b: 747700000000000000   |     jne recur               # Stop when 0
0x0a4: b03f                 |     popq %rbx               # Restore %rbx
0x0a6: 90                   |     ret
                            | 
                            | # Stack starts here and grows to lower addresses
0x200:                      |     .pos 0x200
0x200:                      | stack:

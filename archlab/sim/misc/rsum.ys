# Execution begins at address 0
    .pos 0
    irmovq stack,%rsp       # Set up stack pointer
    call main               # Execute main program
    halt                    # Terminate program

# Sample linked list
    .align 8
ele1:
    .quad 0x00a
    .quad ele2
ele2:
    .quad 0x0b0
    .quad ele3
ele3:
    .quad 0xc00
    .quad 0

main:
    irmovq ele1,%rdi        # Push head of linked-list
    call rsum_list          # rsum_list(ls)
    ret

# long rsum_list(list_ptr ls)
    rsum_list:
    irmovq $0x8,%r8
    pushq %rbx              # Save %rbx
    rrmovq %rdi,%rsi        # %rsi = ls
    xorq %rax,%rax          # sum = 0
    andq %rsi,%rsi          # Set CC
    jmp test                # Goto test
recur:
    mrmovq (%rsi),%rbx      # %rbx = val
    mrmovq 8(%rsi),%rdi     # %rdi = ls->next
    call rsum_list          # rsum_list(ls->next)
    addq %rbx,%rax          # %rax = val + rest
    popq %rbx               # Restore %rbx
    addq %r8,%rsp
    ret
test:
    jne recur               # Stop when 0
    popq %rbx               # Restore %rbx
    ret

# Stack starts here and grows to lower addresses
    .pos 0x200
stack:
